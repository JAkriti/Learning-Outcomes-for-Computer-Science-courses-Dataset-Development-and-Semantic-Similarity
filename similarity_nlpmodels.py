# -*- coding: utf-8 -*-
"""Similarity_NLPmodels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WUh5iMFrsmRzoJQbQZSx0I8q9hC1DEX4

# **Installing Transformers**
"""

!pip install transformers sentence_transformers openai

"""# **Similarity Scores**


"""

from transformers import AlbertConfig, AlbertModel, AlbertTokenizer, AlbertForPreTraining
import torch
from sentence_transformers import SentenceTransformer, util, models
import pandas as pd
import numpy as np
import pandas as pd
data=pd.read_excel(open('Dataset_LOs.xlsx', 'rb'),
              sheet_name='Algorithm Analysis and Design')
data1 = pd.DataFrame()
###############################################################################
def albert(a,b):
    model = SentenceTransformer('paraphrase-albert-small-v2')
    emb1 = model.encode(a.dropna())
    emb2 = model.encode(b.dropna())
    count = 0
    count1 = 0
    average_1 = []
    for item in emb1:
        count = count + 1
        count1 = 0
        sim = []
        for item1 in emb2:
              value = util.cos_sim(item, item1)
              value_1 = value.detach().numpy()
              value_1 = value_1.squeeze()
              sim.append(value_1) 
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def distil(a,b):
    model = SentenceTransformer('all-distilroberta-v1')
    emb1 = model.encode(a.dropna())
    emb2 = model.encode(b.dropna())
    count = 0
    count1 = 0
    average_1 = []
    for item in emb1:
        count = count + 1
        count1 = 0
        sim = []
        for item1 in emb2:
              value = util.cos_sim(item, item1)
              value_1 = value.detach().numpy()
              value_1 = value_1.squeeze()
              sim.append(value_1)
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def bert(a,b):
    model = SentenceTransformer('multi-qa-distilbert-cos-v1')
    emb1 = model.encode(a.dropna())
    emb2 = model.encode(b.dropna())
    count = 0
    count1 = 0
    average_1 = []
    for item in emb1:
        count = count + 1
        count1 = 0
        sim = []
        for item1 in emb2:
              value = util.cos_sim(item, item1)
              value_1 = value.detach().numpy()
              value_1 = value_1.squeeze()
              sim.append(value_1) 
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def mpnetv1(a,b):
    model = SentenceTransformer('multi-qa-mpnet-base-dot-v1')
    emb1 = model.encode(a.dropna())
    emb2 = model.encode(b.dropna())
    count = 0
    count1 = 0
    average_1 = []
    for item in emb1:
        count = count + 1
        count1 = 0
        sim = []
        for item1 in emb2:
              value = util.cos_sim(item, item1)
              value_1 = value.detach().numpy()
              value_1 = value_1.squeeze()
              sim.append(value_1)
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def minilm(a,b):
    model = SentenceTransformer('all-MiniLM-L6-v2')
    emb1 = model.encode(a.dropna())
    emb2 = model.encode(b.dropna())
    count = 0
    count1 = 0
    average_1 = []
    for item in emb1:
        count = count + 1
        count1 = 0
        sim = []
        for item1 in emb2:
              value = util.cos_sim(item, item1)
              value_1 = value.detach().numpy()
              value_1 = value_1.squeeze()
              sim.append(value_1) 
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def mpnet(a,b):
    model = SentenceTransformer('all-mpnet-base-v2')
    emb1 = model.encode(a.dropna())
    emb2 = model.encode(b.dropna())
    count = 0
    count1 = 0
    average_1 = []
    for item in emb1:
        count = count + 1
        count1 = 0
        sim = []
        for item1 in emb2:
              value = util.cos_sim(item, item1)
              value_1 = value.detach().numpy()
              value_1 = value_1.squeeze()
              sim.append(value_1) 
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def ada(a,b):
    model = "text-embedding-ada-002"
    count = 0
    count1 = 0
    average_1 = []
    for item in a:
        emb11 = openai.Embedding.create(input=item, engine=model)['data'][0]['embedding']
        count = count + 1
        count1 = 0
        sim = []
        for item1 in b:
              emb22 = openai.Embedding.create(input=item1, engine=model)['data'][0]['embedding']
              value_1 = np.dot(emb11, emb22) / (np.sqrt(np.dot(emb11,emb11)) * np.sqrt(np.dot(emb22,emb22)))
              # value_1 = value.detach().numpy()
              # value_1 = value_1.squeeze()
              sim.append(value_1) 
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
def davinci(a,b):
    model = "text-similarity-davinci-001"
    count = 0
    count1 = 0
    average_1 = []
    for item in a:
        emb11 = openai.Embedding.create(input=item, engine=model)['data'][0]['embedding']
        count = count + 1
        count1 = 0
        sim = []
        for item1 in b:
              emb22 = openai.Embedding.create(input=item1, engine=model)['data'][0]['embedding']
              value_1 = np.dot(emb11, emb22) / (np.sqrt(np.dot(emb11,emb11)) * np.sqrt(np.dot(emb22,emb22)))
              # value_1 = value.detach().numpy()
              # value_1 = value_1.squeeze()
              sim.append(value_1) 
        values = np.array(sim)  
        average = np.mean(values)    
    average_1.append(average)
    values_avg = np.array(sim)
    avg_val = np.mean(values_avg)
    return avg_val
################################################################################
df1 = pd.DataFrame(columns=['University 1', 'University 2', 'ALBERT'])
counter = 0
for i in range(0,len(data.columns)):
  df = data.iloc[:, i].replace('', np.nan)
  a = df.dropna()
  for j in range(0,len(data.columns)):
    if i != j:
      df = data.iloc[:, j].replace('', np.nan)
      b = df.dropna()
      values_albert =  albert(a,b)
      values_distil = distil(a,b)
      values_bert = bert(a,b)
      values_mpnetv1 = mpnetv1(a,b)
      values_minilm = minilm(a,b)
      values_mpnet = mpnet(a,b)
      values_davinci = davinci(a,b)
      values_ada = ada(a,b)
      row1 = {'University 1': data.columns[i], 'University 2': data.columns[j], 'ALBERT':values_albert, 'DistilRoberta':values_distil, 'DistilBERT':values_bert, 'MPNeTv1':values_mpnetv1, 'MiniLM':values_minilm, 'MPNeTv2':values_mpnet, 'Davinci':values_davinci, 'ada':values_ada}
      df1 = df1.append(row1,ignore_index=True) 
print(df1)
df1.to_csv('Algorithms.csv')

"""# Generating University Pair names with abbreviations"""

import pandas as pd
import numpy as np
import pandas as pd
data=pd.read_excel(open('Dataset_LOs.xlsx', 'rb'),
              sheet_name='AbbProgramming')
df_a = pd.DataFrame()
for i in range(0,len(data.columns)):
  for j in range(0,len(data.columns)):
    if i != j:
      row1 = {'University 1': data.columns[i], 'University 2': data.columns[j]}
      df_a = df_a.append(row1,ignore_index=True)
df_a["Pairs"] = df_a['University 1'] +"-"+ df_a['University 2']
df1 = pd.read_csv('Software.csv')
df1["Pairs"] = df_a["Pairs"]
df1.to_csv('Programming.csv')

"""# Selecting 10 university pairs starting with most similar in each model"""

import numpy as np
import matplotlib.pyplot as plt
df1 = pd.read_csv('Algorithms.csv')
df1["Names"] = df1['University 1'] +"-"+ df1['University 2']
count = 0
################################################################################
n = 10
while count < 10:
  n = n + 1
  ALBERT = df1['ALBERT']
  df2 = df1.sort_values(by=['ALBERT'], ascending=False)
  list1 = df2.head(n)
  BERT = df1['DistilBERT']
  df3 = df1.sort_values(by=['DistilBERT'], ascending=False)
  list2 = df3.head(n)
  DistilRoberta = df1['DistilRoberta']
  df4 = df1.sort_values(by=['DistilRoberta'], ascending=False)
  list3 = df4.head(n)
  MPNet = df1['MPNeTv1']
  df5 = df1.sort_values(by=['MPNeTv1'], ascending=False)
  list4 = df5.head(n)
  RoBERTa_base = df1['MPNeTv2']
  df6 = df1.sort_values(by=['MPNeTv2'], ascending=False)
  list5 = df6.head(n)
  RoBERTa_large = df1['MiniLM']
  df7 = df1.sort_values(by=['MiniLM'], ascending=False)
  list6 = df7.head(n)
  df8 = df1.sort_values(by=['Davinci'], ascending=False)
  list7 = df8.head(n)
  df9 = df1.sort_values(by=['ada'], ascending=False)
  list8 = df9.head(n)
  intdf=list(set(list1.Pairs) & set(list2.Pairs) & set(list3.Pairs)& set(list4.Pairs)& set(list5.Pairs)& set(list6.Pairs)& set(list7.Pairs)& set(list8.Pairs))
  count = len(intdf)
  # print(count,n)
df_new = pd.DataFrame()
for i in range(0,len(intdf)):
  df_new = df_new.append(df1.loc[df1['Pairs'] == intdf[i]])
df2 = pd.DataFrame().assign(University=df_new['Pairs'],ALBERT=df_new['ALBERT'], DistilBERT=df_new['DistilBERT'], DistilRoBERTa = df_new['DistilRoberta'], MPNeTv1 = df_new['MPNeTv1'], MPNeTv2 = df_new['MPNeTv2'], MiniLM = df_new['MiniLM'], Davinci = df_new['Davinci'], ada = df_new['ada'], index=True)
ax = df2.plot(x='University', kind='bar', stacked=True, colormap=plt.cm.Pastel1)
for p in ax.patches:
    width, height = round(p.get_width(),2), round(p.get_height(),2)
    x, y = p.get_xy() 
    ax.text(x+width/2, 
            y+height/2, 
            '{:.2f}'.format(height), 
            horizontalalignment='center', 
            verticalalignment='center',size=7)
plt.ylim([0,8])
plt.xticks(rotation = 25)
plt.xticks(fontsize = 7)
plt.yticks(fontsize = 8)
ax.set_ylabel('Similarity Score')
ax.set_xlabel('University')
plt.legend(loc='upper left', fontsize=8,bbox_to_anchor=(0, 1),ncol=3, fancybox=True)
plt.savefig("Programming.pdf", format="pdf", bbox_inches='tight')